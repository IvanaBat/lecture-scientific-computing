Lecture notes for Scientific computing - Lecture 01: GIT
https://github.com/inwe-boku/lecture-scientific-computing/

Questions in chat:

Is „git log“ the same as gitk ?
	--> yes, kind of, but "git log" is text-only, gitk is graphically and has more features, probably gives you more overview, if you want to tweak git log google "git lol"
what exactly happens when you use ls? 
	--> lists files in a folder
gitk does not work on my mac os bash
	--> we'll have to look into that :(
	     maybe your version of git didn't come with gitk?
	     you have to run gitk always inside the git repository
Should we invite the lecture hosts to our created repository?

Persons looking for a group:
	*     Group1: Brigitte (Bokubst), Peter-zp, Agnes, Vibol
	* Group 2: Vincent (WoerVinc), Flora, Aleks (fbrumen), Doris (doris-wimmer)

repository = folder which is under version control

command:
	* pwd - print working directory
	* cd - change working directory (use cd ../  to go one level upward; Note: whitespace between cd and ../)
	* cd .. - change to the directory above (?) 
	* ls - list of folders/files (in current working directory)
	* CTRL + C to abort
	* tab to autocomplete
	* & for running commands in the background, e.g. gitk& to continue using git commands
	* fg for getting things running in the background to the foreground again (then you can stop the command)
	* CTRL + R to see previous commands

Full range of commands is only available in Linux (but for the class it should be enough on Windows) -- gitbash is similar to using Linux on Windows

merge - only works to merge ammendments by different people in different lines - but if both worked on different lines, it merges and implementes all the changes

git blame
	* when was a line in a file introduced?
	* who introduced a line of code?

https://github.com/inwe-boku/lecture-scientific-computing/ -> github.com/"user name"/"project"

Many stars on github --> good/popular channel


whenever using git: you have a full copy of a repository local (on your machine)

Tutorials:
    Quite hands-on, but entertaining and good, from thenewboston: https://www.youtube.com/watch?v=cEGIFZDyszA&list=PL6gx4Cwl9DGAKWClAD_iKpNC0bGHxGhcx 


git clone = git init  + git fetch
git pull = git fetch + git merge


Homework:
    - please delete forks if you are not the maintainer of the group repository
    

Demonstration: Play tic-tac-toe
1. fork git repository with games
2. new directory
3. clone repository (use link that you copy from the repository - green button on right at website)
4. go into the directory (cd) & choose one of the games (e.g. tic tac toe)
4.b start notepad++ board (command to start windows application within the gitbash; board = filename = parameter of this command)
5. do the first move (change point to x), save and close editor
6. back to gitbash
        cat board (command; displays file)
        git status - shows changes in board
        git add board
        git status - now shows that git knows board has been changed
        git commit -m "blabla blabla"
        --> everything so far/all changes in the file (except the clone and the fork) is locally on the computer
        git push - push this to the repository -> github repository now shows the change in board (now contains the X) -> change is now online
7. settings - manage access - invite coklaborator - add name of collaborator
8. other person takes over 
        accept invitation
        go to forks and choose with which person to play
        clone the with link of other user
        do another move (e.g. with O instead of point)
        add + commit + push
        if pc not connected to github, you are aked for the PW

